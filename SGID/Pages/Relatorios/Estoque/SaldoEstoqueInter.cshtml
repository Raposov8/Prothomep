@page
@model SGID.Pages.Relatorios.Estoque.SaldoEstoqueInterModel
@{
    ViewData["Title"] = "Relatorio Saldo Estoque Inter";
    if (User.IsInRole("Diretoria") && !User.IsInRole("Admin"))
    {
        Layout = "_LayoutDiretoria";
    }
    else
    {
        Layout = "_LayoutNovo";
    }
}

@using (@Html.BeginForm(FormMethod.Post))
{
    <div class="row">
        <div class="form-group mx-sm-3 mb-2 col-lg-2">
            <select type="text" class="form-control" id="Local" name="Local" placeholder="Local">
                <option value="">TODOS...</option>
                <option value="01">01</option>
                <option value="70">70</option>
                <option value="80">80</option>
                <option value="30">30</option>
            </select>
        </div>

        <div class="form-group mx-sm-3 mb-2 col-lg-2">
            <div class="autocomplete">
                <input type="text" class="form-control" id="Produto" name="Produto" oninput="this.value = this.value.toUpperCase()" placeholder="Produto">
            </div>
        </div>

        <div class="form-group mx-sm-3 mb-2 col-lg-1">
            <button type="submit" class="btn btn-primary mb-2">Pesquisar</button>
        </div>


        <div class="form-group mx-sm-3 mb-2 col-lg-1">
            <button type="submit" class="btn btn-secondary mb-2" asp-page-handler="Export"><i class="fa-solid fa-file-excel"></i> Exportar Excel</button>
        </div>
    </div>
}

<div class="panel">
    <div class="panel-body">
        <table id="demo-dt-addrow" class="table table-striped table-bordered" cellspacing="0" width="100%">
            <thead>
                <tr>
                    <th class="text-center">
                        Filial
                    </th>
                    <th class="text-center">
                        Produto
                    </th>
                    <th class="text-center">
                        Desc Prod.
                    </th>
                    <th class="text-center">
                        Local
                    </th>
                    <th class="text-center">
                        Saldo
                    </th>
                    <th class="text-center">
                        Reserva
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var data in Model.Relatorio)
                {
                    <tr>
                        <td>@Html.DisplayFor(model=> data.Filial)</td>
                        <td>@Html.DisplayFor(model=> data.Produto)</td>
                        <td>@Html.DisplayFor(model=> data.DescProd)</td>
                        <td>@Html.DisplayFor(model=> data.Local)</td>
                        <td>@Html.DisplayFor(model=> data.Saldo)</td>
                        <td>@Html.DisplayFor(model=> data.Empenho)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



@section scripts{
    <script>
        var Produtos = [];

        @foreach (var data in Model.Produtos)
        {
            @:Produtos.push("@data")
        }


            $(document).ready(function () {

                function autocomplete(inp, arr) {
                    /*the autocomplete function takes two arguments,
                    the text field element and an array of possible autocompleted values:*/
                    var currentFocus;
                    /*execute a function when someone writes in the text field:*/
                    inp.addEventListener("input", function (e) {
                        var a, b, i, val = this.value;
                        /*close any already open lists of autocompleted values*/
                        closeAllLists();
                        if (!val) { return false; }
                        currentFocus = -1;
                        /*create a DIV element that will contain the items (values):*/
                        a = document.createElement("DIV");
                        a.setAttribute("id", this.id + "autocomplete-list");
                        a.setAttribute("class", "autocomplete-items form-control");
                        /*append the DIV element as a child of the autocomplete container:*/
                        this.parentNode.appendChild(a);
                        /*for each item in the array...*/
                        for (i = 0; i < arr.length; i++) {
                            /*check if the item starts with the same letters as the text field value:*/
                            if (arr[i].toUpperCase().includes(val.toUpperCase())) {
                                /*create a DIV element for each matching element:*/
                                b = document.createElement("DIV");
                                /*make the matching letters bold:*/
                                /*b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                                b.innerHTML += arr[i].substr(val.length);*/
                                b.innerHTML = arr[i];
                                /*insert a input field that will hold the current array item's value:*/
                                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                                /*execute a function when someone clicks on the item value (DIV element):*/
                                b.addEventListener("click", function (e) {
                                    /*insert the value for the autocomplete text field:*/
                                    inp.value = this.getElementsByTagName("input")[0].value;
                                    /*close the list of autocompleted values,
                                    (or any other open lists of autocompleted values:*/
                                    closeAllLists();
                                });
                                a.appendChild(b);
                            }
                        }
                    });
                    /*execute a function presses a key on the keyboard:*/
                    inp.addEventListener("keydown", function (e) {
                        var x = document.getElementById(this.id + "autocomplete-list");
                        if (x) x = x.getElementsByTagName("div");
                        if (e.keyCode == 40) {
                            /*If the arrow DOWN key is pressed,
                            increase the currentFocus variable:*/
                            currentFocus++;
                            /*and and make the current item more visible:*/
                            addActive(x);
                        } else if (e.keyCode == 38) { //up
                            /*If the arrow UP key is pressed,
                            decrease the currentFocus variable:*/
                            currentFocus--;
                            /*and and make the current item more visible:*/
                            addActive(x);
                        } else if (e.keyCode == 13) {
                            /*If the ENTER key is pressed, prevent the form from being submitted,*/
                            e.preventDefault();
                            if (currentFocus > -1) {
                                /*and simulate a click on the "active" item:*/
                                if (x) x[currentFocus].click();
                            }
                        }
                    });
                    function addActive(x) {
                        /*a function to classify an item as "active":*/
                        if (!x) return false;
                        /*start by removing the "active" class on all items:*/
                        removeActive(x);
                        if (currentFocus >= x.length) currentFocus = 0;
                        if (currentFocus < 0) currentFocus = (x.length - 1);
                        /*add class "autocomplete-active":*/
                        x[currentFocus].classList.add("autocomplete-active");
                    }
                    function removeActive(x) {
                        /*a function to remove the "active" class from all autocomplete items:*/
                        for (var i = 0; i < x.length; i++) {
                            x[i].classList.remove("autocomplete-active");
                        }
                    }
                    function closeAllLists(elmnt) {
                        /*close all autocomplete lists in the document,
                        except the one passed as an argument:*/
                        var x = document.getElementsByClassName("autocomplete-items");
                        for (var i = 0; i < x.length; i++) {
                            if (elmnt != x[i] && elmnt != inp) {
                                x[i].parentNode.removeChild(x[i]);
                            }
                        }
                    }
                    /*execute a function when someone clicks in the document:*/
                    document.addEventListener("click", function (e) {
                        closeAllLists(e.target);
                    });
                }

                autocomplete(document.getElementById("Produto"), Produtos);

            })
    </script>
}

